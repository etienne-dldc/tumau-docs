<|Image src="https://github.com/etienne-dldc/tumau/blob/master/design/logo.svg" alt="tumau logo" center |>

<|Title>🏺 Tumau|>

<|Quote>A node HTTP framework written in Typescript|>

Tumau is a small NodeJS server (just like <|Link href="https://expressjs.com/">Express|> or <|Link href="https://koajs.com/">Koa|>) with almost no external dependencies and written in TypeScript.

<|Subtitle>Gist|>

<#Code lang="ts">
import { createServer, TumauResponse, RequestConsumer } from 'tumau';
const server = createServer(ctx => {
  const request = ctx.get(RequestConsumer);
  return TumauResponse.withText(`Hello World ! (from ${request.url})`);
});
server.listen(3002, () => {
  console.log(`Server is up at http://localhost:3002`);
});
<Code#>

<|Subtitle>Benefits over Express/Koa/Other|>

<|List>
  <|LI>Written in Typescript (strong yet easy-to-use types)|>
  <|LI>Almost no external dependency (easy to audit)|>
  <|LI>Simple to extends (using middleware)|>
  <|LI>Modular, you can take only what you need.|>
<List|>

<|Subtitle>Install|>

<#Code lang="bash">
# npm
npm install tumau

# yarn
yarn add tumau
<Code#>

<|Subtitle>Packages|>

The <|InlineCode>tumau|> package is a proxi for different packages:

<|List>
  <|LI><|PackageLink package="@tumau/core"|>|>
  <|LI><|PackageLink package="@tumau/url-parser"|> for parsing url (pathname, query...)|>
  <|LI><|PackageLink package="@tumau/router"|> for routing (it uses `@tumau/url-parser` for url parsing)|>
  <|LI><|PackageLink package="@tumau/json"|> for parsing / sending JSON|>
  <|LI><|PackageLink package="@tumau/compress"|> for Brotli / GZip / Deflate compression|>
  <|LI><|PackageLink package="@tumau/cookie"|> for readong and setting cookies|>
  <|LI><|PackageLink package="@tumau/cors"|> for CORS headers|>
<List|>

<|Subtitle>Dependencies|>

<|PackageLink package="@tumau/router"|> has <|Link href="https://github.com/etienne-dldc/chemin"><|InlineCode>chemin|>|> as a dependency and `chemin` itself has zero dependencies.
<|PackageLink package="@tumau/ws"|> depend on <|Link href="https://github.com/websockets/ws"><|InlineCode>WS|>|>.

<|Subtitle>Overview|>

Like many other server, Tumau is based on middleware. A middleware is like a layer the request has to go though. At some point a response is created by one of the middleware and the response has to travel back to the outside (go through every layer in the opposite order) to be sent.

<|Image src="https://github.com/etienne-dldc/tumau/blob/master/design/illu-1.png" alt="middleware" center |>

A middleware can stop the chain and return a response. In that case the next middleware will not be called !

<|Image src="https://github.com/etienne-dldc/tumau/blob/master/design/illu-2.png" alt="next" center |>

<|Subtitle>Tools|>

In tumau the tools is what you get in middleware to interact wth the other middlewares.

The tools let you do two things:

<|List>
  <|LI>Read / Write a context (Take a look a <|Link href="https://github.com/etienne-dldc/tumau/blob/master/examples/context/index.ts">this example|>)|>
  <|LI>Call the next middleware|>
<List|>

<|H3>For TypeScript users|>

Contexts are typed when you create them:

<#Code lang="ts">
import { createContext } from 'tumau';
// here we could omit <number> because it would be infered
const NumCtx = createContext<number>(0);
// you can omit the default value
const NameCtx = createContext<string>();
<Code#>

<|Subtitle>Middleware|>

A middleare is a function that:

<|List>
  <|LI>receives the tools|>
  <|LI>can return a response or null (or a promise of one of them)|>
<List|>

<#Code lang="ts">
type Middleware = (tools: Tools) => null | Response | Promise<null | Response>;
<Code#>

Example:

<#Code lang="js">
const myMiddleware = async (ctx, next) => {
  // 1. We receive a ctx object
  console.log(ctx); // { get, getOrFail, has, with }
  // 2. We call `next` to call the next middleware
  const response = await next(ctx);
  // 3. The next middleware return a response
  console.log(response);
  // 4. We return that response
  return response;
};
<Code#>

<|H3><|InlineCode>tools.next|>|>

The <|InlineCode>tools.next|> function is always async (it return a Promise).
It take np parameter and return a Promise of a Response or null

<#Code lang="ts">
type Next = () => Promise<Response | null>;
<Code#>

<|H3>Some examples|>

<#Code lang="js">
// Return a response, ignore next middleware
const middleware = () => Response.withText('Hello');

// Return a response if the next middleware did not
const middleware = async tools => {
  const response = await tools.next();
  if (response === null) {
    return Response.withText('Not found');
  }
  return response;
};

// Add a item to the context before calling the next middleware
// return whatever the next middleware return
const middleware = tools => {
  const nextTools = tools.with(ReceivedAtContext.Provide(new Date()));
  return nextTools.next();
};
<Code#>

<|H3>Conbining multiple Middlewares|>

The <|InlineCode>Server.create|> function take only one middleware as parameter. To use multiple middleware you need to combine them with <|InlineCode>compose|> :

<#Code lang="js">
import { createServer, compose } from 'tumau';

const composed = compose(logger, cors, main);

const server = createServer(composed);
<Code#>

<|Note>
  Middlewares are executed in the order they are passed to <|InlineCode>compose|>. In the example above: <|InlineCode>logger|>, then <|InlineCode>cors|>, then <|InlineCode>main|> (then the reverse order on the way up).
<Note|>

<|Subtitle>More Examples|>

Take a look a the <|Link href="https://github.com/etienne-dldc/tumau/tree/master/examples" >Examples|> folder !

<|Subtitle>Performance|>

<|Quote>Is it fast ?|>

I'm no expert in benchmarks but from <|Link href="https://github.com/etienne-dldc/tumau/tree/master/benchmarks" >my attempt to measure it|> it's a bit faster than Koa and Express but not as fast as <|Link href="https://github.com/fastify/fastify" >fastify|>.

You can run the benchmark yourself by running <|InlineCode>yarn benchmark|> in the root folder of the monorepo. Fell free to add more framework or more complex cases !

<|Subtitle>What does "Tumau" means|>

<|Link href="https://translate.google.com/?source=osdd#view=home&op=translate&sl=en&tl=mi&text=server">According to Google Traduction|> it is the translation of "server" in Maori but I'm not sure which definition it apply to. Anyway I thought it would make a cool name and it was not used on NPM so...
